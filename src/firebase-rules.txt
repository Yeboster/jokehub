rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Jokes collection rules
    match /jokes/{jokeId} {
      // ANYONE can read jokes
      allow read: if true;

      // Authenticated users can create jokes for themselves.
      // Ensures essential fields are present and valid.
      allow create: if request.auth != null
                      && request.resource.data.userId == request.auth.uid
                      && request.resource.data.text is string && request.resource.data.text.size() > 0
                      && request.resource.data.category is string && request.resource.data.category.size() > 0
                      && (!('source' in request.resource.data) || request.resource.data.source is string && request.resource.data.source.size() <= 100)
                      && request.resource.data.funnyRate is number
                      && request.resource.data.funnyRate >= 0 && request.resource.data.funnyRate <= 5
                      && request.resource.data.dateAdded is timestamp // Handled by server/Timestamp.now()
                      && request.resource.data.used is bool
                      && (!('averageRating' in request.resource.data) || request.resource.data.averageRating is number)
                      && (!('ratingCount' in request.resource.data) || request.resource.data.ratingCount is number);

      // Update rules are split into two main cases: an owner editing, or the system updating ratings.
      allow update: if request.auth != null && (
        // Condition 1: The owner is updating the joke's content.
        (
          resource.data.userId == request.auth.uid &&
          // The owner cannot change these fields directly.
          request.resource.data.userId == resource.data.userId &&
          request.resource.data.dateAdded == resource.data.dateAdded &&
          // The fields an owner *can* change must be valid in their final state.
          request.resource.data.text is string && request.resource.data.text.size() > 0 &&
          request.resource.data.category is string && request.resource.data.category.size() > 0 &&
          // Correctly validate the source field: it must be a string, and if it's not empty, its size must be <= 100
          request.resource.data.source is string && request.resource.data.source.size() <= 100 &&
          request.resource.data.funnyRate is number && request.resource.data.funnyRate >= 0 && request.resource.data.funnyRate <= 5 &&
          request.resource.data.used is bool &&
          // Allow rating fields to be present, but not changed by the owner.
          request.resource.data.averageRating == resource.data.averageRating &&
          request.resource.data.ratingCount == resource.data.ratingCount
        ) ||
        // Condition 2: Any authenticated user triggers an update to rating fields ONLY.
        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['averageRating', 'ratingCount']) &&
          // Ensure other fields are not changed during a rating update.
          request.resource.data.userId == resource.data.userId &&
          request.resource.data.dateAdded == resource.data.dateAdded &&
          request.resource.data.text == resource.data.text &&
          request.resource.data.category == resource.data.category &&
          request.resource.data.source == resource.data.source &&
          request.resource.data.funnyRate == resource.data.funnyRate &&
          request.resource.data.used == resource.data.used &&
          // Validate the types of the rating fields.
          request.resource.data.averageRating is number &&
          request.resource.data.ratingCount is number
        )
      );

      // Owner can delete their joke.
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Categories collection rules
    match /categories/{categoryId} {
      // ANYONE can read categories (for filtering)
      allow read: if true;

      // Authenticated users can create categories for themselves.
      // Ensures name is a non-empty string.
      allow create: if request.auth != null
                      && request.resource.data.userId == request.auth.uid
                      && request.resource.data.name is string
                      && request.resource.data.name.size() > 0;

      // Disallow direct updates/deletes of categories for simplicity.
      // Category management could be a future enhancement.
      allow update: if false;
      allow delete: if false;
    }

    // Joke Ratings collection rules
    match /jokeRatings/{ratingId} {
      // ANYONE can read ratings
      allow read: if true;

      // Authenticated users can create a rating for any joke.
      // The userId in the rating document must be their own.
      allow create: if request.auth != null
                      && request.resource.data.userId == request.auth.uid
                      && request.resource.data.jokeId is string && request.resource.data.jokeId.size() > 0
                      && request.resource.data.stars is number
                      && request.resource.data.stars >= 1 && request.resource.data.stars <= 5
                      && (request.resource.data.comment == null || (request.resource.data.comment is string && request.resource.data.comment.size() <= 1000))
                      && request.resource.data.createdAt is timestamp // Should be set by server
                      && request.resource.data.updatedAt is timestamp; // Should be set by server

      // Authenticated users can update THEIR OWN rating.
      allow update: if request.auth != null && resource.data.userId == request.auth.uid
                      && request.resource.data.userId == resource.data.userId // Cannot change owner of rating
                      && request.resource.data.jokeId == resource.data.jokeId // Cannot change which joke is rated
                      && request.resource.data.createdAt == resource.data.createdAt // Cannot change creation date
                      && (request.resource.data.stars == resource.data.stars || (request.resource.data.stars is number && request.resource.data.stars >= 1 && request.resource.data.stars <= 5))
                      && (request.resource.data.comment == resource.data.comment || request.resource.data.comment == null || (request.resource.data.comment is string && request.resource.data.comment.size() <= 1000))
                      && request.resource.data.updatedAt is timestamp; // Should be set by server

      // Authenticated users can delete THEIR OWN rating.
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
  }
}
